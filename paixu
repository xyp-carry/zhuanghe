#include<iostream>
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<windows.h>
#include<time.h>
using namespace std;
int arr[10000];
const int len=sizeof(arr)/sizeof(int);
int b[10][len+1]={0};//将b全部置0
void bucketSort(int a[]);//桶排序函数
void distributeElments(int a[],int b[10][len+1],int digits);
void collectElments(int a[],int b[10][len+1]);
int numOfDigits(int a[]);
void zeroBucket(int b[10][len+1]);//将b数组中的全部元素置0
void swap(int* a, int* b)
{
    int temp = *b;
    *b = *a;
    *a = temp;
}
 
void max_heapify(int arr[], int start, int end) 
{
    //建立父节点指标和子节点指标
    int dad = start;
    int son = dad * 2 + 1;
    while (son <= end)  //若子节点指标在范围内才做比较
        {
            if (son + 1 <= end && arr[son] < arr[son + 1]) 
            //先比较两个子节点大小，选择最大的
            son++;
        if (arr[dad] > arr[son]) //如果父节点大於子节点代表调整完毕，直接跳出函数
            return;
        else  //否则交换父子内容再继续子节点和孙节点比较
        {
            swap(&arr[dad], &arr[son]);
            dad = son;
            son = dad * 2 + 1;
        }
    }
}/*最大堆排序*/
void min_heapify(int arr[], int start, int end) 
{
    //建立父节点指标和子节点指标
    int dad = start;
    int son = dad * 2 + 1;
    while (son <= end)  //若子节点指标在范围内才做比较
        {
            if (son + 1 <= end && arr[son] > arr[son + 1]) 
            //先比较两个子节点大小，选择最大的
            son++;
        if (arr[dad] < arr[son]) //如果父节点大於子节点代表调整完毕，直接跳出函数
            return;
        else  //否则交换父子内容再继续子节点和孙节点比较
        {
            swap(&arr[dad], &arr[son]);
            dad = son;
            son = dad * 2 + 1;
        }
    }
} 
void heap_sortmax(int a[], int len) 
{
    int i;
    //初始化，i从最後一个父节点开始调整
    for (i = len / 2 - 1; i >= 0; i--)
        max_heapify(a, i, len - 1);
    //先将第一个元素和已排好元素前一位做交换，再重新调整，直到排序完毕
    for (i = len - 1; i > 0; i--) 
    {
        swap(&a[0], &a[i]);
        max_heapify(a, 0, i - 1);
    }
}
void heap_sortmin(int b[], int len) 
{
    int i;
    //初始化，i从最後一个父节点开始调整
    for (i = len / 2 - 1; i >= 0; i--)
        min_heapify(b, i, len - 1);
    //先将第一个元素和已排好元素前一位做交换，再重新调整，直到排序完毕
    for (i = len - 1; i > 0; i--) 
    {
        swap(&b[0], &b[i]);
        min_heapify(b, 0, i - 1);
    }
}
int main() 
{
	long op1,op2,op3,ed1,ed2,ed3;
	int a[10000];
	int b[10000];
	int c[10000];
	int i;
	FILE* fp=fopen("D:\\1.txt","r"); 
	if(fp==NULL)
	{
		printf("无文件");
		system("pause");
		return -1;
	}
	for(i=0;i<10000;i++)
	{
		fscanf(fp,"%d",&arr[i]);
		a[i]=arr[i];
		b[i]=arr[i];
		c[i]=arr[i];
	}
	fclose(fp);
	op1=clock();
    bucketSort(c);
    cout<<"桶排序：";
    for(int i=0;i<len;i++)
	{
	    printf("%d ",c[i]);
	}
	ed1=clock();
	printf("\n");
	printf("桶排序运行时间：%1ldms",ed1-op1);
	printf("\n\n");
	op2=clock();
    heap_sortmax(a, len);
	printf("最大堆排序：");
    for (i = 0; i < len; i++)
        printf("%d ", a[i]);
	ed2=clock();
	printf("\n");
	printf("最大堆排序运行时间：%1ldms",ed2-op2);
	printf("\n\n");
	op3=clock();
	heap_sortmin(b, len);
	printf("最小堆排序：");
    for (i = 0; i < len; i++)
        printf("%d ", b[i]);
    printf("\n");
	ed3=clock();
	printf("最小堆排序运行时间：%1ldms\n",ed3-op3);
	system("pause");
    return 0;
}
void bucketSort(int a[])
{
int digits=numOfDigits(a);
for(int i=1;i<=digits;i++)
{
distributeElments(a,b,i);
collectElments(a,b);
if(i!=digits)
zeroBucket(b);
}
}
int numOfDigits(int a[])
{
int largest=0;
for(int i=0;i<len;i++)//获取最大值
if(a[i]>largest)
largest=a[i];
int digits=0;//digits为最大值的位数
while(largest)
{
digits++;
largest/=10;
}
return digits;
}
void distributeElments(int a[],int b[10][len+1],int digits)
{
int divisor=10;//除数
for(int i=1;i<digits;i++)
divisor*=10;
for(int j=0;j<len;j++)
{
int numOfDigist=(a[j]%divisor-a[j]%(divisor/10))/(divisor/10);
//numOfDigits为相应的(divisor/10)位的值,如当divisor=10时,求的是个位数
int num=++b[numOfDigist][0];//用b中第一列的元素来储存每行中元素的个数
b[numOfDigist][num]=a[j];
}
}
void collectElments(int a[],int b[10][len+1])
{
int k=0;
for(int i=0;i<10;i++)
for(int j=1;j<=b[i][0];j++)
a[k++]=b[i][j];
}
void zeroBucket(int b[][len+1])
{
for(int i=0;i<10;i++)
for(int j=0;j<len+1;j++)
b[i][j]=0;
}
